/****************************************************************************
**
** Copyright (C) 2022 Raphael Cotty (abbapoh@gmail.com)
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import qbs.File
import qbs.FileInfo
import qbs.ModUtils
import qbs.TextFile

Module {
    property string configFileName: packageName + "Config.cmake"
    property string versionFileName: packageName + "ConfigVersion.cmake"
    property string packageName: product.targetName
    property string includeDirectory: "include"

    additionalProductTypes: ["Exporter.cmake.module"]

    Group {
        fileTagsFilter: ["Exporter.cmake.module"]
        qbs.install: true
        qbs.installDir: "lib/cmake"
    }
    Group {
        fileTagsFilter: "dynamiclibrary"
        qbs.install: true
        qbs.installDir: "lib"
    }

    Rule {
        multiplex: true
        requiresInputs: false

        // Make sure all relevant library artifacts have been created by the time we run.
        auxiliaryInputs: {
            if (product.type.contains("staticlibrary"))
                return ["staticlibrary"];
            if (product.type.contains("dynamiclibrary"))
                return ["dynamiclibrary"];
        }

        Artifact {
            filePath: product.Exporter.cmake.configFileName
            fileTags: ["Exporter.cmake.module"]
        }
        Artifact {
            filePath: product.Exporter.cmake.versionFileName
            fileTags: ["Exporter.cmake.module"]
        }
        inputsFromDependencies: ["dynamiclibrary"]
        prepare: {
            var cmd = new JavaScriptCommand();
            cmd.description = "generate cmake package files";
            cmd.sourceCode = function() {
                var packageName = product.Exporter.cmake.packageName;
                var cmakeConfigFile = new TextFile(outputs["Exporter.cmake.module"][0].filePath,
                                                  TextFile.WriteOnly);
                cmakeConfigFile.writeLine("# Generated by Qbs");

                cmakeConfigFile.writeLine("cmake_minimum_required(VERSION 3.5)");

                cmakeConfigFile.writeLine("if(TARGET " + packageName + ")");
                cmakeConfigFile.writeLine("  return()");
                cmakeConfigFile.writeLine("endif()");

                var packageNAME = packageName.toUpperCase();
                var targetCMakeDir = "_" + packageNAME + "_CMAKEDIR";
                var targetIncludeDir = "_" + packageNAME + "_INCLUDEDIR";
                var targetLibDir = "_" + packageNAME + "_LIBDIR";
                cmakeConfigFile.writeLine("get_filename_component(" + targetCMakeDir +
                                          " \"${CMAKE_CURRENT_LIST_DIR}\" ABSOLUTE)");
                cmakeConfigFile.writeLine("get_filename_component(" + targetIncludeDir + " \"${" +
                                          targetCMakeDir + "}/../../include/\" ABSOLUTE)");
                cmakeConfigFile.writeLine("get_filename_component(" + targetLibDir + " \"${" +
                                          targetCMakeDir + "}/../\" ABSOLUTE)");


                cmakeConfigFile.writeLine("add_library(" + packageName + " SHARED IMPORTED)");
                var configuration = (product.qbs.buildVariant) ?
                            product.qbs.buildVariant.toUpperCase() : "NONE";
                cmakeConfigFile.writeLine("set_property(TARGET " + packageName +
                                          " APPEND PROPERTY IMPORTED_CONFIGURATIONS " +
                                          configuration + ")");

                cmakeConfigFile.writeLine("set_target_properties(" + packageName + " PROPERTIES");
                cmakeConfigFile.writeLine("  INTERFACE_INCLUDE_DIRECTORIES \"${" +
                                          targetIncludeDir + "}\"");
                cmakeConfigFile.writeLine("  IMPORTED_LINK_INTERFACE_LANGUAGES_" + configuration +
                                          " CXX");
                var libArtifacts = product.artifacts.dynamiclibrary;

                cmakeConfigFile.writeLine("  IMPORTED_LOCATION_" + configuration + " \"${" +
                                          targetLibDir + "}/" + libArtifacts[0].fileName + "\"");
                cmakeConfigFile.writeLine("  IMPORTED_SONAME_" + configuration + " \"" +
                                          libArtifacts[0].fileName + "\"");
                cmakeConfigFile.writeLine(")");

                cmakeConfigFile.close();
                var cmakeVersionFile = new TextFile(outputs["Exporter.cmake.module"][1].filePath,
                                                    TextFile.WriteOnly);
                cmakeVersionFile.writeLine("# Generated by Qbs");
                cmakeVersionFile.writeLine("set(PACKAGE_VERSION \"" + product.version + "\")");
                cmakeVersionFile.close();

            }
            return [cmd];
        }
    }
}
